apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'application'
apply plugin: 'jacoco'

//-----------------------------------------------------------------------------
// application config

// set main class for application plugin
mainClassName = "org.robinbird.Application"
// default JVM args for application plugin
applicationDefaultJvmArgs = ["-Dorg.slf4j.simpleLogger.defaultLogLevel=debug"]
//applicationDefaultJvmArgs = ["-Dorg.slf4j.simpleLogger.defaultLogLevel=debug", "-Xms1g", "-Xmx4g"]

run {
	// split space-delimited value in robinbird.args (or rb.args) and pass as args
	String robinbirdArgs = System.getProperty("robinbird.args")
	robinbirdArgs = (robinbirdArgs == null) ? System.getProperty("rb.args") : robinbirdArgs
	if (robinbirdArgs != null) {
		args robinbirdArgs.split()
	}
}

//-----------------------------------------------------------------------------
// adding shell.dir
startScripts {

	def addShellDirVar = { findJVMOpt, line ->
		line = line.replaceAll(~/^${findJVMOpt}=.*$/) { original ->
			original += "\" -Dshell.dir=\$SAVED\""
		}
	}
	def addShellDirUnix = addShellDirVar.curry('DEFAULT_JVM_OPTS')
	def addShellDirWindows = addShellDirVar.curry('set DEFAULT_JVM_OPTS')
	doLast {
		unixScript.text = unixScript
			.readLines()
			.collect(addShellDirUnix)
			.join('\n')
		windowsScript.text = windowsScript
			.readLines()
			.collect(addShellDirWindows)
			.join('\r\n')
	}
}


//-----------------------------------------------------------------------------
// antlr config

// grammar source directory for antlr plugin
generateGrammarSource {
	outputDirectory = file("src/main/java/org/robinbird/parser/java8")
}



//-----------------------------------------------------------------------------
// jacoco config

jacoco.toolVersion = "0.7.9"

test {
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		//classDumpFile = file("$buildDir/jacoco/classpathdumps") gradle error happened. don't know why..
	}
	check.dependsOn jacocoTestReport
}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled true
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['org/robinbird/parser/**'])
		})
	}

	doLast {
		logger.lifecycle("JaCoCo Report: ${buildDir}/jacocoHtml/index.html")
		def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
		logger.quiet("Coverage ratio for each type:")

		def reportParser = new XmlParser()
		reportParser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
		reportParser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
		def results = reportParser.parse(report)

		results.counter.each {
			def type = it.'@type'
			def covered = it.'@covered' as Float
			def missed = it.'@missed' as Float
			logger.quiet("{}: {}", type, (covered/(covered+missed)).round(3))
		}
	}
}


repositories {
	mavenCentral()
}




dependencies {
	antlr "org.antlr:antlr4:4.5"
	compile "com.google.guava:guava:22.0"
	compile "commons-cli:commons-cli:1.4"
	compile "org.apache.commons:commons-lang3:3.0"
	compile "org.slf4j:slf4j-simple:1.7.25"
	compile "com.h2database:h2:1.3.148"
	compile "javax.persistence:javax.persistence-api:2.2"
	compile "org.hibernate:hibernate-entitymanager:5.3.6.Final"
	compileOnly "org.projectlombok:lombok:1.18.2"
    testCompile "org.projectlombok:lombok:1.18.2"
	testCompile "junit:junit:4.12"
	testCompile "org.mockito:mockito-core:2.8.47"
	testCompile "com.google.guava:guava-testlib:20.0"
	testCompile "nl.jqno.equalsverifier:equalsverifier:2.3.2" // http://jqno.nl/equalsverifier/
	testCompile "be.joengenduvel.java.verifiers:to-string:1.0.2" // https://github.com/Joengenduvel/toStringVerifier
}


